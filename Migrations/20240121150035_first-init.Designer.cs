// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using congestion_tax_calculator_net_core.EF;

namespace congestion_tax_calculator_net_core.Migrations
{
    [DbContext(typeof(MainContext))]
    [Migration("20240121150035_first-init")]
    partial class firstinit
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.32")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("congestion_tax_calculator_net_core.Data.Entity.City", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("MaxTax")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("City");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1114eb2e-3588-4239-98a4-f7e3023674e8"),
                            CreatedAt = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxTax = 60,
                            Name = "Gothenburg"
                        });
                });

            modelBuilder.Entity("congestion_tax_calculator_net_core.Data.Entity.CongestionTax", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("VehicleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("VehicleId");

                    b.ToTable("CongestionTax");
                });

            modelBuilder.Entity("congestion_tax_calculator_net_core.Data.Entity.CongestionTaxRule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("From")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("To")
                        .HasColumnType("datetime2");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("CongestionTaxRule");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1114eb2e-3588-4239-98a4-f7e3023674e9"),
                            Amount = 8,
                            CityId = new Guid("1114eb2e-3588-4239-98a4-f7e3023674e8"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            From = new DateTime(2000, 1, 1, 6, 0, 0, 0, DateTimeKind.Unspecified),
                            To = new DateTime(2000, 1, 1, 6, 29, 59, 0, DateTimeKind.Unspecified),
                            Type = 0
                        },
                        new
                        {
                            Id = new Guid("2114eb2e-3588-4239-98a4-f7e3023674e9"),
                            Amount = 13,
                            CityId = new Guid("1114eb2e-3588-4239-98a4-f7e3023674e8"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            From = new DateTime(2000, 1, 1, 6, 30, 0, 0, DateTimeKind.Unspecified),
                            To = new DateTime(2000, 1, 1, 6, 59, 59, 0, DateTimeKind.Unspecified),
                            Type = 0
                        },
                        new
                        {
                            Id = new Guid("3114eb2e-3588-4239-98a4-f7e3023674e9"),
                            Amount = 18,
                            CityId = new Guid("1114eb2e-3588-4239-98a4-f7e3023674e8"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            From = new DateTime(2000, 1, 1, 7, 0, 0, 0, DateTimeKind.Unspecified),
                            To = new DateTime(2000, 1, 1, 7, 59, 59, 0, DateTimeKind.Unspecified),
                            Type = 0
                        },
                        new
                        {
                            Id = new Guid("4114eb2e-3588-4239-98a4-f7e3023674e9"),
                            Amount = 13,
                            CityId = new Guid("1114eb2e-3588-4239-98a4-f7e3023674e8"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            From = new DateTime(2000, 1, 1, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            To = new DateTime(2000, 1, 1, 8, 29, 59, 0, DateTimeKind.Unspecified),
                            Type = 0
                        },
                        new
                        {
                            Id = new Guid("5114eb2e-3588-4239-98a4-f7e3023674e9"),
                            Amount = 8,
                            CityId = new Guid("1114eb2e-3588-4239-98a4-f7e3023674e8"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            From = new DateTime(2000, 1, 1, 8, 30, 0, 0, DateTimeKind.Unspecified),
                            To = new DateTime(2000, 1, 1, 14, 59, 59, 0, DateTimeKind.Unspecified),
                            Type = 0
                        },
                        new
                        {
                            Id = new Guid("6114eb2e-3588-4239-98a4-f7e3023674e9"),
                            Amount = 13,
                            CityId = new Guid("1114eb2e-3588-4239-98a4-f7e3023674e8"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            From = new DateTime(2000, 1, 1, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            To = new DateTime(2000, 1, 1, 15, 29, 59, 0, DateTimeKind.Unspecified),
                            Type = 0
                        },
                        new
                        {
                            Id = new Guid("7114eb2e-3588-4239-98a4-f7e3023674e9"),
                            Amount = 18,
                            CityId = new Guid("1114eb2e-3588-4239-98a4-f7e3023674e8"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            From = new DateTime(2000, 1, 1, 15, 30, 0, 0, DateTimeKind.Unspecified),
                            To = new DateTime(2000, 1, 1, 16, 59, 59, 0, DateTimeKind.Unspecified),
                            Type = 0
                        },
                        new
                        {
                            Id = new Guid("8114eb2e-3588-4239-98a4-f7e3023674e9"),
                            Amount = 13,
                            CityId = new Guid("1114eb2e-3588-4239-98a4-f7e3023674e8"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            From = new DateTime(2000, 1, 1, 17, 0, 0, 0, DateTimeKind.Unspecified),
                            To = new DateTime(2000, 1, 1, 17, 59, 59, 0, DateTimeKind.Unspecified),
                            Type = 0
                        },
                        new
                        {
                            Id = new Guid("9114eb2e-3588-4239-98a4-f7e3023674e9"),
                            Amount = 8,
                            CityId = new Guid("1114eb2e-3588-4239-98a4-f7e3023674e8"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            From = new DateTime(2000, 1, 1, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            To = new DateTime(2000, 1, 1, 18, 29, 59, 0, DateTimeKind.Unspecified),
                            Type = 0
                        });
                });

            modelBuilder.Entity("congestion_tax_calculator_net_core.Data.Entity.Vehicle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("NumberPlates")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Vehicle");
                });

            modelBuilder.Entity("congestion_tax_calculator_net_core.Data.Entity.CongestionTax", b =>
                {
                    b.HasOne("congestion_tax_calculator_net_core.Data.Entity.Vehicle", "Vehicle")
                        .WithMany("CongestionTaxes")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("congestion_tax_calculator_net_core.Data.Entity.CongestionTaxRule", b =>
                {
                    b.HasOne("congestion_tax_calculator_net_core.Data.Entity.City", "City")
                        .WithMany("CongestionTaxRules")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
